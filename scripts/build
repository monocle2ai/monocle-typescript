#!/usr/bin/env bash

set -exuo pipefail

cd "$(dirname "$0")/.."

# Build into dist and will publish the package from there,
# so that src/resources/foo.ts becomes <package root>/resources/foo.js
# This way importing from `"openai/resources/foo"` works
# even with `"moduleResolution": "node"`

rm -rf dist; mkdir dist
# Copy src to dist/src and build from dist/src into dist, so that
# the source map for index.js.map will refer to ./src/index.ts etc
cp -rp src README.md dist
echo "export const LIB_VERSION = \"$(node -p "require('./package.json').version")\";" > dist/src/instrumentation/common/monocle_version.ts

# rm dist/src/_shims/*-deno.ts dist/src/_shims/auto/*-deno.ts
for file in LICENSE CHANGELOG.md; do
  if [ -e "${file}" ]; then cp "${file}" dist; fi
done
if [ -e "bin/cli" ]; then
  mkdir dist/bin
  cp -p "bin/cli" dist/bin/;
fi
# this converts the export map paths for the dist directory
# and does a few other minor things
node scripts/utils/make-package-json-dist.cjs > dist/package.json

# build to .js/.mjs/.d.ts files
echo "Script executed from: ${PWD}"
npm run build:typescript

# find instrumentation.cjs files and remove any section that is inside specific comment blocks

# // @esm-only
# require("./esmModule.cjs"); // remove this line
# // @end-esm-only

find dist -name esmModule.cjs -type f | while read -r file; do
  echo "Processing $file"
  # Create a temporary file
  temp_file=$(mktemp)
  # Use sed to remove lines between and including the comment markers
  # The -i option for in-place editing differs between macOS and Linux, so we use a temp file
  sed '/\/\/ @esm-only/,/\/\/ @end-esm-only/d' "$file" > "$temp_file"
  # Replace the original file with the modified content
  mv "$temp_file" "$file"
done

