name: Publish NPM Package
on:
  workflow_dispatch:

jobs:
  validate-and-publish:
    environment: ArtifactPublish
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Check branch name
        id: check-branch
        run: |
          BRANCH_NAME=${GITHUB_REF#refs/heads/}
          if [[ $BRANCH_NAME != release/* ]]; then
            echo "Error: Branch name must start with 'release/'"
            exit 1
          fi
          echo "branch_name=$BRANCH_NAME" >> $GITHUB_OUTPUT

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20'
          registry-url: 'https://registry.npmjs.org'

      - name: Install dependencies
        run: npm ci

      - name: Build package
        run: npm run build

      # - name: Run tests
      #   run: npm test

      - name: Get version from package.json
        id: package-version
        run: |
          VERSION=$(node -p "require('./package.json').version")
          echo "version=$VERSION" >> $GITHUB_OUTPUT

      - name: Check if version is a pre-release
        id: check-prerelease
        run: |
          VERSION="${{ steps.package-version.outputs.version }}"
          if [[ $VERSION == *"-alpha"* || $VERSION == *"-beta"* || $VERSION == *"-rc"* || $VERSION == *"-next"* ]]; then
            echo "is_prerelease=true" >> $GITHUB_OUTPUT
            echo "Version $VERSION is a pre-release, skipping GitHub Release and PR creation"
          else
            echo "is_prerelease=false" >> $GITHUB_OUTPUT
            echo "Version $VERSION is a stable release"
          fi

      - name: Check CHANGELOG.md for version entry
        if: steps.check-prerelease.outputs.is_prerelease == 'false'
        run: |
          VERSION="${{ steps.package-version.outputs.version }}"
          if ! grep -q "## $VERSION" CHANGELOG.md; then
            echo "Error: Version $VERSION not found in CHANGELOG.md"
            echo "Please add an entry for this version in the CHANGELOG.md file"
            exit 1
          fi
          echo "CHANGELOG.md contains entry for version $VERSION"

      - name: Extract release notes
        id: extract-release-notes
        if: steps.check-prerelease.outputs.is_prerelease == 'false'
        run: |
          VERSION="${{ steps.package-version.outputs.version }}"
          # Extract the content between current version and the next version marker or end of file
          RELEASE_NOTES=$(awk -v ver="## $VERSION" '
            $0 ~ ver {flag=1; next}
            /^## [0-9]+\.[0-9]+\.[0-9]+/ {if (flag) exit}
            flag {print}
          ' CHANGELOG.md)
          # Store release notes in a file
          echo "$RELEASE_NOTES" > release_notes.md
          echo "Extracted release notes for version $VERSION"

      - name: Configure Git
        run: |
          git config --local user.email "info@lfaidata.foundation"
          git config --local user.name "Monocle pr bot"

      - name: Publish to NPM
        continue-on-error: true
        id: npm-publish
        run: |
          cd dist
          npm publish --access public
          echo "publish_success=true" >> $GITHUB_OUTPUT
        env:
          NODE_AUTH_TOKEN: ${{ secrets.NPM_TOKEN }}

      - name: Check if GitHub Release exists
        id: check-release
        if: steps.check-prerelease.outputs.is_prerelease == 'false'
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
          VERSION="${{ steps.package-version.outputs.version }}"
          if gh release view "v$VERSION" &> /dev/null; then
            echo "release_exists=true" >> $GITHUB_OUTPUT
            echo "Release v$VERSION already exists, skipping creation"
          else
            echo "release_exists=false" >> $GITHUB_OUTPUT
          fi

      - name: Create GitHub Release
        if: steps.check-prerelease.outputs.is_prerelease == 'false' && steps.check-release.outputs.release_exists != 'true'
        continue-on-error: true
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
          VERSION="${{ steps.package-version.outputs.version }}"
          gh release create "v$VERSION" \
            --title "Release v$VERSION" \
            --notes-file release_notes.md

      - name: Create Pull Request to main
        if: steps.check-prerelease.outputs.is_prerelease == 'false'
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
          message="Release version ${{ steps.package-version.outputs.version }}"
          body="This PR merges the release ${{ steps.package-version.outputs.version }} into main.

          Changes:
          - Published version ${{ steps.package-version.outputs.version }} to npm
          - Updated CHANGELOG.md"
          
          git config --global user.email "info@lfaidata.foundation"
          git config --global user.name "Monocle pr bot"
 
          branch="${{ steps.check-branch.outputs.branch_name }}"

          git push origin HEAD:$branch
          gh pr create --title "$message" \
                       --body "$body" \
                       --head $branch \
                       --base main